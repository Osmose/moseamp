name: Build and Package

on: [pull_request]
  # push:
  #   tags:
  #     - 'v*'

jobs:
  build:
    name: Build and Package
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {os: macOS-latest, package: "package:macos", artifact: "MoseAmp.dmg" }
        - {os: windows-latest, package: "package:windows", artifact: "MoseAmp.zip" }

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '13.x'
    - run: npm install
    - run: npm run compile
    - run: npm run build:prod
    - run: npm run ${{ matrix.config.package }}
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.config.artifact }}
        path: dist/${{ matrix.config.artifact }}
    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: ${{ github.ref }}
    #     draft: false
    #     prerelease: false
    # - name: Upload Release Asset
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1.0.1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
    #     asset_path: ./dist/${{ matrix.config.artifact }}
    #     asset_name: ${{ matrix.config.artifact }}
    #     asset_content_type: application/octet-stream
